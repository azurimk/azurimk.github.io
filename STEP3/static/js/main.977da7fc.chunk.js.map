{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","toDoListSaved","JSON","parse","localStorage","getItem","state","toDoList","title","description","deadline","sortBy","filter","handleChange","bind","handleAddItem","deleteItem","setDeadline","setSort","handleDone","setFilter","toDoListDisplay","this","item","status","sort","a","b","creation","toDoListUI","map","index","array","key","Date","toLocaleString","name","value","onClick","className","type","placeholder","required","onChange","cols","calendarType","e","target","setState","newItem","now","getTime","newList","setItem","stringify","alert","parseInt","findIndex","splice","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAwJeA,E,kDAlJb,WAAYC,GAAO,IAAD,sBAChB,eAEA,IAAMC,EACJC,KAAKC,MAAMC,aAAaC,QAAQ,cAAc,GAJhC,OAMhB,EAAKC,MAAQ,CACXC,SAAUN,EACVO,MAAM,GACNC,YAAY,GACZC,SAAU,KACVC,OAAQ,QACRC,OAAQ,OAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,QAAU,EAAKA,QAAQJ,KAAb,gBACf,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAClB,EAAKM,UAAW,EAAKA,UAAUN,KAAf,gBApBA,E,qDAuBT,IAAD,OACFO,EAAkBC,KAAKhB,MAAMC,SAEjC,OAAOe,KAAKhB,MAAMM,QAChB,IAAK,MACH,MACF,IAAK,SACHS,EAAkBA,EAAgBT,QAAO,SAAAW,GAAI,MAAmB,WAAfA,EAAKC,UAAqB,MAC7E,IAAK,OACHH,EAAkBA,EAAgBT,QAAO,SAAAW,GAAI,MAAoB,SAAhBA,EAAKC,UAI1D,OAAOF,KAAKhB,MAAMK,QAClB,IAAK,QACJU,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAEE,SAAWD,EAAEC,YAAW,MACxD,IAAK,QACJP,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAAQA,EAAEC,SAAWF,EAAEE,YAAW,MACxD,IAAK,QACJP,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAEhB,SAAWiB,EAAEjB,YAAW,MACxD,IAAK,QACJW,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAAQA,EAAEjB,SAAWgB,EAAEhB,YAI7C,IAAMmB,EAAaR,EAAgBS,KAAI,SAACP,EAAKQ,EAAMC,GAAZ,OACtC,yBAAKC,IAAKF,GACRA,EADF,YACkBR,EAAKf,MAAM,6BAD7B,gBAEee,EAAKd,YAAY,6BAFhC,aAGY,IAAIyB,KAAKX,EAAKK,UAAUO,iBAAiB,6BAHrD,aAIY,IAAID,KAAKX,EAAKb,UAAUyB,iBAAiB,6BAJrD,WAKUZ,EAAKC,OAAO,6BACrB,4BAAQY,KAAK,SAASC,MAAOd,EAAKK,SAAUU,QAAS,EAAKtB,YAA1D,UACA,4BAAQoB,KAAK,OAAOC,MAAOd,EAAKK,SAAUU,QAAS,EAAKnB,YAAxD,QACA,iCAGF,OACE,yBAAKoB,UAAU,OACb,0CADF,IACsB,6BACpB,2BAAOC,KAAK,OAAOJ,KAAK,QAAQK,YAAY,QAAQJ,MAAOf,KAAKhB,MAAME,MAAOkC,UAAQ,EAACC,SAAUrB,KAAKT,eAAgB,6BACrH,8BAAUuB,KAAK,cACfK,YAAY,UAAUG,KAAK,KAC3BP,MAAOf,KAAKhB,MAAMG,YAClBkC,SAAUrB,KAAKT,eAAgB,6BAC/B,kBAAC,IAAD,CAAUgC,aAAa,KAAKF,SAAUrB,KAAKL,YAAaoB,MAAOf,KAAKhB,MAAMI,WAC1E,4BAAQ0B,KAAK,MAAME,QAAShB,KAAKP,eAAjC,OACA,6BATF,WAUU,4BAAQqB,KAAK,OAAOC,MAAOf,KAAKhB,MAAMK,OAAQgC,SAAUrB,KAAKJ,SACnE,4BAAQmB,MAAM,SAAd,iBACA,4BAAQA,MAAM,SAAd,iBACA,4BAAQA,MAAM,SAAd,iBACA,4BAAQA,MAAM,SAAd,kBAdJ,UAgBS,4BAAQD,KAAK,SAASC,MAAOf,KAAKhB,MAAMM,OAAQ+B,SAAUrB,KAAKF,WACpE,4BAAQiB,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAEF,6BACCR,K,mCAIMiB,GACU,UAAlBA,EAAEC,OAAOX,KACVd,KAAK0B,SAAS,CAACxC,MAAQsC,EAAEC,OAAOV,QACL,gBAAlBS,EAAEC,OAAOX,MAClBd,KAAK0B,SAAS,CAACvC,YAAcqC,EAAEC,OAAOV,U,oCAI5BS,GAEZ,GAAqB,QAAlBA,EAAEC,OAAOX,KAEZ,GAAwB,KAArBd,KAAKhB,MAAME,MAAd,CAIE,IAAMyC,EAAU,CACdzC,MAAOc,KAAKhB,MAAME,MAClBC,YAAaa,KAAKhB,MAAMG,YACxBmB,SAAUM,KAAKgB,MACfxC,SAAUY,KAAKhB,MAAMI,SAASyC,UAC9B3B,OAAQ,UAEVF,KAAK0B,SAAS,CAACxC,MAAO,GAAGC,YAAa,GAAGC,SAAU,KAAKc,OAAO,WAE/D,IAAI4B,EAAO,sBAAO9B,KAAKhB,MAAMC,UAAlB,CAA4B0C,IACvC3B,KAAK0B,SAAS,CAACzC,SAAU6C,IACzBhD,aAAaiD,QAAQ,WAAYnD,KAAKoD,UAAUF,SAdhDG,MAAM,oB,iCAkBCT,GACT,IAAMlB,EAAW4B,SAASV,EAAEC,OAAOV,OAC7Be,EAAU9B,KAAKhB,MAAMC,SAErBwB,EAAQqB,EAAQK,WAAU,SAAAlC,GAAI,OAAIA,EAAKK,WAAaA,KAEtDG,GAAS,GAAGqB,EAAQM,OAAO3B,EAAM,GACrCT,KAAK0B,SAAS,CAACzC,SAAU6C,IACzBhD,aAAaiD,QAAQ,WAAYnD,KAAKoD,UAAUF,M,iCAGvCN,GACT,IAAMlB,EAAW4B,SAASV,EAAEC,OAAOV,OAC7Be,EAAU9B,KAAKhB,MAAMC,SACrBwB,EAAQqB,EAAQK,WAAU,SAAAlC,GAAI,OAAIA,EAAKK,WAAaA,KAC1DwB,EAAQrB,GAAOP,OAAO,OACtBF,KAAK0B,SAAS,CAACzC,SAAU6C,IACzBhD,aAAaiD,QAAQ,WAAYnD,KAAKoD,UAAUF,M,kCAGtCf,GAAOf,KAAK0B,SAAS,CAACtC,SAAU2B,M,8BAEpCS,GAAGxB,KAAK0B,SAAS,CAACrC,OAAQmC,EAAEC,OAAOV,U,gCAEjCS,GAAGxB,KAAK0B,SAAS,CAACpC,OAAQkC,EAAEC,OAAOV,Y,GAhJ7BsB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.977da7fc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Calendar from 'react-calendar';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super();\n    \n    const toDoListSaved\n    = JSON.parse(localStorage.getItem('toDoList'))||[];\n\n    this.state = {\n      toDoList: toDoListSaved,\n      title:\"\",\n      description:\"\",\n      deadline: null,\n      sortBy: 'c-asc',\n      filter: 'all'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setDeadline = this.setDeadline.bind(this);\n    this.setSort = this.setSort.bind(this);\n    this.handleDone = this.handleDone.bind(this);\n    this.setFilter =this.setFilter.bind(this);\n  }\n\n  render(){\n    let toDoListDisplay = this.state.toDoList;\n\n    switch(this.state.filter){\n      case 'all': \n        break;\n      case 'active':\n        toDoListDisplay = toDoListDisplay.filter(item => item.status ==='active'); break;\n      case 'done':\n        toDoListDisplay = toDoListDisplay.filter(item => item.status === 'done'); break;\n      default:\n    };\n\n    switch(this.state.sortBy){\n    case 'c-asc':\n     toDoListDisplay.sort((a,b)=> a.creation - b.creation); break;\n    case 'c-dsc':\n     toDoListDisplay.sort((a,b)=> b.creation - a.creation); break;\n    case 'd-asc':\n     toDoListDisplay.sort((a,b)=> a.deadline - b.deadline); break;\n    case 'd-dsc':\n     toDoListDisplay.sort((a,b)=> b.deadline - a.deadline); break;\n    default:\n      };\n\n    const toDoListUI = toDoListDisplay.map((item,index,array)=>\n    (<div key={index}>\n      {index}: Title: {item.title}<br />\n      description: {item.description}<br />\n      Creation: {new Date(item.creation).toLocaleString()}<br />\n      Deadline: {new Date(item.deadline).toLocaleString()}<br />\n      Status: {item.status}<br />\n      <button name=\"delete\" value={item.creation} onClick={this.deleteItem}>Delete</button>\n      <button name=\"done\" value={item.creation} onClick={this.handleDone}>Done</button>\n      <hr />\n    </div>));\n\n    return (\n      <div className=\"App\">\n        <h1>To Do List</h1> <hr />\n        <input type=\"text\" name=\"title\" placeholder=\"title\" value={this.state.title} required onChange={this.handleChange} /><br />\n        <textarea name=\"description\" \n        placeholder=\"content\" cols=\"50\" \n        value={this.state.description} \n        onChange={this.handleChange} /><br />\n        <Calendar calendarType=\"US\" onChange={this.setDeadline} value={this.state.deadline} />\n        <button name=\"add\" onClick={this.handleAddItem}>Add</button>\n        <hr />\n        Sort by <select name=\"sort\" value={this.state.sortBy} onChange={this.setSort}>\n          <option value=\"c-asc\">creation(asc)</option>\n          <option value=\"c-dsc\">creation(dsc)</option>\n          <option value=\"d-asc\">deadline(asc)</option>\n          <option value=\"d-dsc\">deadline(dsc)</option>\n        </select>\n        Status <select name=\"filter\" value={this.state.filter} onChange={this.setFilter}>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"done\">Done</option>\n        </select>\n        <hr />\n        {toDoListUI}\n      </div>\n    );\n  }\n  handleChange(e) {\n    if(e.target.name === 'title'){\n      this.setState({title : e.target.value});\n    } else if (e.target.name === 'description'){\n      this.setState({description : e.target.value});\n    }\n  }\n\n  handleAddItem(e){\n\n    if(e.target.name !== 'add') return;\n\n    if(this.state.title === ''){\n      alert('Title is empty'); return;\n    }\n    \n      const newItem = {\n        title: this.state.title,\n        description: this.state.description,\n        creation: Date.now(),\n        deadline: this.state.deadline.getTime(),\n        status: 'active'\n      };\n      this.setState({title: \"\",description: \"\",deadline: null,status:'active'});\n    \n      let newList = [...this.state.toDoList, newItem];\n      this.setState({toDoList: newList});\n      localStorage.setItem('toDoList', JSON.stringify(newList));\n    \n  }\n\n  deleteItem(e){\n    const creation = parseInt(e.target.value);\n    const newList = this.state.toDoList;\n\n    const index = newList.findIndex(item => item.creation === creation);\n\n    if (index >= 0) newList.splice(index,1);\n    this.setState({toDoList: newList});\n    localStorage.setItem('toDoList', JSON.stringify(newList));\n  }\n\n  handleDone(e){\n    const creation = parseInt(e.target.value);\n    const newList = this.state.toDoList;\n    const index = newList.findIndex(item => item.creation === creation)\n    newList[index].status='done'\n    this.setState({toDoList: newList});\n    localStorage.setItem('toDoList', JSON.stringify(newList));\n  }\n\n  setDeadline(value){this.setState({deadline: value});}\n\n  setSort(e){this.setState({sortBy: e.target.value});}\n\n  setFilter(e){this.setState({filter: e.target.value});}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}